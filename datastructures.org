#+SETUPFILE: ./org-html-themes/org/theme-readtheorg.setup


* Hash tables

- Hash table maps keys to value for highly efficient lookup.
- There are two ways to implements them :
  + Using an array and a linked list :: take more space / more efficient, lookup time is O(1) if the number of collision of not too high _O(n) in that case._
  + Using binary search tree :: optimize on the space size / lookup in order / lookup in O(logn)


** Simple insertion steps

1. First, *compute the key's hash code* to make correspondance with its place in our datastructure. (/Two different keys could have the same hash code, because there may be an infinite number of keys and a finite number of places where to store your keys' values/)
2. *Map the hash code to an index* in the array (first method). You could do that using something like =hash(key) % array_length=. (/Two different hash codes could map to the same index/)
3. At the index, you store a *linked list* of keys and values pairs. *Because of collisions of keys* (two keys having the same hash code, or two hash code mapping to the same index) we use linked list.


#+begin_note
To retrieve the value pair by its key, you repeat this process.
1. Compute the hash code from the key
2. Compute the index from the hash code
3. Search through the linked list for the value with this key.
#+end_note



~(page 100)~
